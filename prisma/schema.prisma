generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile?
}

model Profile {
  id                  String       @id @default(uuid())
  avatar              String?
  banner              String?
  bio                 String?      @db.Text
  discordId           String?
  isDiscordEnabled    Boolean      @default(false)
  isSpotifyEnabled    Boolean      @default(false)
  spotifyAccessToken  String?
  spotifyRefreshToken String?
  isPublic            Boolean      @default(false)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  user                User         @relation(fields: [userId], references: [id])
  userId              Int          @unique
  socialLinks         SocialLink[]
  customLinks         CustomLink[]
  musicPlayer         MusicPlayer?
  uniqueViews         UniqueView[]
  totalViews          TotalView[]
}

model SocialLink {
  id        Int      @id @default(autoincrement())
  platform  String
  icon      String
  url       String
  profileId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile  @relation(fields: [profileId], references: [id])
}

model CustomLink {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  profileId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile  @relation(fields: [profileId], references: [id])
}

model MusicPlayer {
  id         Int      @id @default(autoincrement())
  trackName  String
  artistName String
  albumName  String
  albumArt   String
  spotifyId  String?
  profileId  String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  profile    Profile  @relation(fields: [profileId], references: [id])
}

model UniqueView {
  id        Int      @id @default(autoincrement())
  ipAddress String
  userId    String
  profileId String
  createdAt DateTime @default(now())
  profile   Profile  @relation(fields: [profileId], references: [id])

  @@unique([ipAddress, profileId])
}

model TotalView {
  id        Int      @id @default(autoincrement())
  ipAddress String
  userId    String
  profileId String
  createdAt DateTime @default(now())
  profile   Profile  @relation(fields: [profileId], references: [id])
}

